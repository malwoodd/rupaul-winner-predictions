# -*- coding: utf-8 -*-
"""RuPaul Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16DHDTqlXfH4VwoFooWLcH0r-xzVz8Hk9
"""

import requests
from urllib.request import urlopen as uReq
from bs4 import BeautifulSoup as soup
from collections import namedtuple
import pandas as pd
from google.colab import drive
drive.mount('drive')

queen_properties = ["id", "queen_name", "birthdate", "age", "hometown", "location"]
Queen = namedtuple("Queen", queen_properties)

def clean_name(raw_name):
  #print(raw_name)
  #correcting for spelling mistakes on wiki site and/or inconsistencies in naming conventions
  if raw_name == "Victoria 'Porkchop' Parker":
    return('Victoria_Parker')
  if raw_name == 'Kalorie Karbdashian Williams':
    return("Kalorie_Karbdashian-Williams")
  if raw_name == 'Stacey Lane Matthews':
    return('Stacy_Layne_Matthews')
  if raw_name == 'LaShauwn Beyond':
    return('Lashauwn_Beyond')
  if raw_name == 'Vivienne Piney':
    return('Vivienne_Pinay')
  if raw_name == 'Roxxy Andrews':
    return('Roxxxy_Andrews')
  if raw_name == 'Jamyes Mansfield':
    return('Jaymes_Mansfield')
  if raw_name == "Eureka O'Hara":
    return("Eureka!")
  if raw_name == "Nina Bo'Nina Brown":
    return("Nina_Bo'Nina_Brown")
  if raw_name == 'Dusty Rae Bottoms':
    return("Dusty_Ray_Bottoms")
  if raw_name == 'Dahlia Sinn':
    return('Dahlia_Sin')
  if raw_name == 'Sh*rry P**':
    return("Sherry_Pie")
  cleaned_char = []
  for chr in raw_name:
    if chr.isalpha():
      cleaned_char.append(chr)
    elif chr == " ":
      cleaned_char.append("_")
    elif chr == "-":
      cleaned_char.append("-")
    elif chr == "'":
      cleaned_char.append("'")
  cleaned_name = "".join(cleaned_char)
  return cleaned_name

url = "http://www.nokeynoshade.party/api/queens/all"

response = requests.get(url=url)
queens_json = response.json()

print(queens_json)
print(len(queens_json))

list_of_names = []

for idx, queen in enumerate(queens_json):
  raw_name = queen["name"]
  id = queen["id"]
  list_of_names.append(clean_name(raw_name))
  print(id, clean_name(raw_name))

print(list_of_names)

def create_tuple_for(queen_object):
  queen_name = clean_name(queen_object["name"])
  my_url = 'https://rupaulsdragrace.fandom.com/wiki/' + queen_name
  #print(my_url)
  # opening connection and grabbing the page
  uClient = uReq(my_url)
  #off loads the content into a variable
  page_html = uClient.read()
  # closes the file
  uClient.close()
  #parse the html
  page_soup = soup(page_html, "html.parser")
  birth_info = page_soup.findAll("div", {"data-source": "birth year"})
  dob_info = page_soup.findAll("div", {"data-source": "date_of_birth"})
  location_info = page_soup.findAll("div", {"data-source": "Location"})
  hometown_info = page_soup.findAll("div", {"data-source": "Hometown"})

  # If there is no hometown on the wiki, make it equal to location
  if hometown_info == [] and location_info == []:
    hometown = ""
    location = ""
  elif location_info and not hometown_info:
    location = location_info[0].div.text
    hometown = location
  elif hometown_info and not location_info:
    hometown = hometown_info[0].div.text
    location = hometown
  elif hometown_info and location_info:
    location = location_info[0].div.text
    hometown = hometown_info[0].div.text
  #if data source 'Hometown' is actually 'hometown'
  elif location_info and not hometown_info:
    location = location_info[0].div.text
    hometown = page_soup.findAll("div", {"data-source": "Hometown"})
  #if data source 'location' is actually 'current_city'
  elif hometown_info and not location_info:
    hometown = hometown_info[0].div.text
    location = page_soup.findAll("div", {"data-source": "current_city"})

  #if data source 'birth date' is actually 'date_of_birth'
  if birth_info:
    birthdate = birth_info[0].div.text
  else:
    birthdate = dob_info[0].div.text

  # Sometimes birth info has 1 or 2 elements
  if len(birth_info) <= 1:
    age = page_soup.findAll("div", {"data-source": "age"})[0].div.text
  else:
    age = birth_info[1].div.text

  # Create tuple from properties
  id = queen_object["id"]
  # age = birth_info[1].div.text
  queen_tuple = Queen(id, queen_name, birthdate, age, hometown, location)

  return queen_tuple

create_tuple_for(queens_json[23])

queens_list = []

for queen in queens_json:
  queen_bio = create_tuple_for(queen)
  queens_list.append(queen_bio)

print(queens_list)

queens_dataframe = pd.DataFrame.from_records(queens_list, columns=queen_properties)

queens_dataframe.to_csv("/content/drive/MyDrive/Developer/Queens.csv", index=False)

queens_dataframe.head()